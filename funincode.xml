<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2016-09-13 18:43"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Fun In Code</title>
<link>https://kylietramle.wordpress.com</link>
<description/>
<pubDate>Tue, 13 Sep 2016 18:43:33 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>https://kylietramle.wordpress.com</wp:base_blog_url>
<wp:author>
  <wp:author_login>kylietramle</wp:author_login>
  <wp:author_email>kylie.tram.le@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[kylietramle]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<wp:tag>
  <wp:term_id>31428</wp:term_id>
  <wp:tag_slug>modules</wp:tag_slug>
  <wp:tag_name><![CDATA[modules]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>102206</wp:term_id>
  <wp:tag_slug>namespaces</wp:tag_slug>
  <wp:tag_name><![CDATA[namespaces]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4872</wp:term_id>
  <wp:tag_slug>ruby</wp:tag_slug>
  <wp:tag_name><![CDATA[ruby]]></wp:tag_name>
</wp:tag>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://secure.gravatar.com/blavatar/0c2ed1a06d6f4e213a4472039f5ef416?s=96&#038;d=https%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</url>
		<title>Fun In Code</title>
		<link>https://kylietramle.wordpress.com</link>
	</image>
	<item>
  <title>Modules-Namespaces</title>
  <link>https://kylietramle.wordpress.com/2016/04/11/modules-namespaces/</link>
  <pubDate>Mon, 11 Apr 2016 21:52:28 +0000</pubDate>
  <dc:creator>kylietramle</dc:creator>
  <guid isPermaLink="false">https://kylietramle.wordpress.com/?p=35</guid>
  <description/>
  <content:encoded><![CDATA[Modules exist to solve the naming conflict in Ruby, a situation at which two methods with the same name are called simultaneously. For example:
<pre><code># The following method returns a celebrity name, created in the 
'celebrity_star' file.

<span style="color:#ff00ff;">def</span> <span style="color:#008000;">star</span>
  <span style="color:#ff6600;">"George Clooney"</span>
<span style="color:#ff00ff;">end</span>

# The second method has the same name, but instead returns the name of a
Southern Hemisphere constellation. It lies in the 'constellation_star' file.

<span style="color:#ff00ff;">def</span> <span style="color:#008000;">star</span>
  <span style="color:#ff6600;">"Dove"</span>
<span style="color:#ff00ff;">end</span>

----------------------------

<span style="color:#ff00ff;">require</span> <span style="color:#ff6600;">'celebrity_star'</span>
<span style="color:#ff00ff;">require</span> <span style="color:#ff6600;">'constellation_star'</span>

puts star

------------------------------
</code></pre>
In this case, which version of <code>star</code> is called?

When these two methods are called at the same time,  the first <code>star</code> method is "lost." Only the second <code>star</code> method would be called.

Modules help solve these conflicts by providing namespaces that allow classes, methods, and constants to co-exist peacefully:
<pre><code><span style="color:#ff00ff;">module</span> Celebrity
  <span style="color:#ff00ff;">def</span> <span style="color:#008000;">Celebrity.star</span>
    <span style="color:#ff6600;">"George Clooney"</span>
  <span style="color:#ff00ff;">end</span>
<span style="color:#ff00ff;">end</span>

<span style="color:#ff00ff;">module</span> Constellation
  <span style="color:#ff00ff;">def</span> <span style="color:#008000;">Constellation.star</span>
    <span style="color:#ff6600;">"Dove"</span>
  <span style="color:#ff00ff;">end</span>
<span style="color:#ff00ff;">end</span>

puts <span style="color:#3366ff;">Celebrity</span>.star
# =&gt; "George Clooney"

puts <span style="color:#3366ff;">Constellation</span>.star
# =&gt; "Dove"
</code></pre>
Same for classes with the same name, but in different modules, namespacing can allow developers to address them directly:
<pre><code><span style="color:#ff00ff;">module</span> Seafood
  <span style="color:#ff00ff;">class</span> Bass
    <span style="color:#ff00ff;">attr_accessor</span> <span style="color:#0000ff;">:weight</span>
  <span style="color:#ff00ff;">end</span>
<span style="color:#ff00ff;">end</span>

<span style="color:#ff00ff;">module</span> Instrument
  <span style="color:#ff00ff;">class</span> Bass
    <span style="color:#ff00ff;">attr_accessor</span> <span style="color:#0000ff;">:decibel</span>
  <span style="color:#ff00ff;">end</span>
<span style="color:#ff00ff;">end</span>

fish = <span style="color:#3366ff;">Seafood</span>::<span style="color:#3366ff;">Bass</span>.<span style="color:#ff00ff;">new</span>
fish.weight = <span style="color:#0000ff;">25</span>

bass_player = <span style="color:#3366ff;">Instrument</span>::<span style="color:#3366ff;">Bass</span>.<span style="color:#ff00ff;">new</span>
bass_player.decibel = <span style="color:#0000ff;">106
</span></code></pre>
This way, the output wouldn’t be a mutant 25-lbs fish that plays a 106dB instrument; the <code>Bass</code> classes are kept separately in <code>Seafood</code> and <code>Instrument</code> namespaces.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>35</wp:post_id>
  <wp:post_date>2016-04-11 13:52:28</wp:post_date>
  <wp:post_date_gmt>2016-04-11 21:52:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>modules-namespaces</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="modules"><![CDATA[modules]]></category>
  <category domain="post_tag" nicename="namespaces"><![CDATA[namespaces]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21690321873]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Active Record: CRUD</title>
  <link>https://kylietramle.wordpress.com/2016/04/16/active-record-crud/</link>
  <pubDate>Sun, 17 Apr 2016 06:03:44 +0000</pubDate>
  <dc:creator>kylietramle</dc:creator>
  <guid isPermaLink="false">https://kylietramle.wordpress.com/?p=125</guid>
  <description/>
  <content:encoded><![CDATA[In Rails, Active Record library provides users the ability to easily store and access relational databases. Creating Active Record models parallel with creating a new class in Ruby, and then set it to inherit from the <code>ActiveRecord::Base</code> class. The newly created class, once used to create objects, has its own data table with columns as its attributes.

For example, from the <code>Pig</code> model, I created 3 different <code>Pig</code> instances and stored their attributes in the following table called <b>pigs</b>:
<table style="width:100%;" border="1">
<tbody>
<tr>
<th>id</th>
<th>greeting</th>
<th>name</th>
</tr>
<tr>
<td>1</td>
<td>...ZzZzz...</td>
<td>Willy</td>
</tr>
<tr>
<td>2</td>
<td>Cookies...cookies.</td>
<td>Wilbur</td>
</tr>
<tr>
<td>3</td>
<td>Play with me!</td>
<td>Willy-kun</td>
</tr>
</tbody>
</table>
To read and edit this data, I use <strong>CRUD</strong> -- acronym for <strong>C</strong>reate, <strong>R</strong>ead, <strong>U</strong>pdate, and <strong>D</strong>estroy.

<span style="text-decoration:underline;"><strong>Create</strong></span>

To create a new pig, I call for the <code>create</code> method from the <code>Pig</code> model and store its attributes, <em>greeting</em> and <em>name</em>, using a hash. This will save a new record to the table.
<pre><code>pig = Pig.create(greeting: "Helloooo", name: "Wilbur-kun")</code></pre>
Note how I didn't need to set the id. Rails takes care of this automatically!

This is the updated table:
<table style="width:100%;" border="1">
<tbody>
<tr>
<th>id</th>
<th>greeting</th>
<th>name</th>
</tr>
<tr>
<td>1</td>
<td>...ZzZzz...</td>
<td>Willy</td>
</tr>
<tr>
<td>2</td>
<td>Cookies...cookies.</td>
<td>Wilbur</td>
</tr>
<tr>
<td>3</td>
<td>Play with me!</td>
<td>Willy-kun</td>
</tr>
<tr>
<td>4</td>
<td>Helloooo.</td>
<td>Wilbur-kun</td>
</tr>
</tbody>
</table>
<span style="text-decoration:underline;"><strong>Read</strong></span>

There are a few methods to access/read data. Here are a few common ones:
<pre><code><span style="font-weight:400;">Pig.find(2)</span> <span style="font-weight:400;">=&gt;  </span><i><span style="font-weight:400;">returns single pig with id of 2
</span></i><span style="font-weight:400;">Pig.find(2,3,4)</span> <span style="font-weight:400;">=&gt;  </span><i><span style="font-weight:400;">returns an array of pigs with id: 2,3,4
</span></i><span style="font-weight:400;">Pig.find_by(name: "Willy") =&gt;</span><i><span style="font-weight:400;"> returns the pig named "Willy"
</span></i><span style="font-weight:400;">Pig.first</span> <span style="font-weight:400;">=&gt;  </span><i><span style="font-weight:400;">returns first pig
</span></i><span style="font-weight:400;">Pig.last</span> <span style="font-weight:400;">=&gt;  </span><i><span style="font-weight:400;">returns last pig
</span></i><span style="font-weight:400;">Pig.all</span> <span style="font-weight:400;">=&gt;  </span><i><span style="font-weight:400;">returns array of all pigs
</span></i><span style="font-weight:400;">Pig.count</span> <span style="font-weight:400;">=&gt; </span><i><span style="font-weight:400;"> returns total number of pigs</span></i></code></pre>
<span style="text-decoration:underline;"><strong>Update</strong></span>

To update, use the <code>find</code> method to access a particular pig. Then, call the <code>update</code> method and match the attribute to a new desired value.
<pre><code>pig = Pig.find(4)
pig.update(greeting: "Ice cream!")
</code></pre>
Now, Wilbur-kun's greeting will be "Ice Cream!" instead of "Helloooo."
<table style="width:100%;" border="1">
<tbody>
<tr>
<th>id</th>
<th>greeting</th>
<th>name</th>
</tr>
<tr>
<td>4</td>
<td>Ice cream!</td>
<td>Wilbur-kun</td>
</tr>
</tbody>
</table>
<span style="text-decoration:underline;"><strong>Destroy</strong></span>

In the same manner, I can destroy a pig by accessing the instance in the database and apply the destroy method. Be careful, since there's no undoing this!
<pre><code>pig = Pig.find(4)
pig.destroy
</code></pre>
Now, I no longer have a pig named Wilbur-kun in my database.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>125</wp:post_id>
  <wp:post_date>2016-04-16 22:03:44</wp:post_date>
  <wp:post_date_gmt>2016-04-17 06:03:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>active-record-crud</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21866614929]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>2</wp:comment_id>
    <wp:comment_author><![CDATA[Sami]]></wp:comment_author>
    <wp:comment_author_email>samanthamorco@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://smorco.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>216.174.112.39</wp:comment_author_IP>
    <wp:comment_date>2016-04-17 09:59:50</wp:comment_date>
    <wp:comment_date_gmt>2016-04-17 17:59:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Looks good! I can't believe you killed poor Wilbur-kun :(]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>49118589</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1460915991.2378520965576171875;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"smorco";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1460924618</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1460924618</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1460920939.676187992095947265625;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"smorco";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1460924619.2470920085906982421875;s:5:"event";s:15:"status-approved";s:4:"user";s:11:"kylietramle";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Rails: Database Migration</title>
  <link>https://kylietramle.wordpress.com/2016/04/30/rails-database-migration/</link>
  <pubDate>Sat, 30 Apr 2016 22:04:29 +0000</pubDate>
  <dc:creator>kylietramle</dc:creator>
  <guid isPermaLink="false">https://kylietramle.wordpress.com/?p=253</guid>
  <description/>
  <content:encoded><![CDATA[To make changes to the database, Rails has a method called <em>migration</em>. Migration files are created when users generate a new model or when they modify their existing data.

While generating a new model, Rails automatically create a primary key called ID, which doesn't show up in the migration file.

For example, when a user creates a Teletubby model in the terminal:
<pre><code>$ rails g model Teletubby name:string bio:text age:integer
</code></pre>
This command creates the following file:
<em><span style="color:#000080;">db/migrate/20150723201749_create_teletubbies.rb</span></em>
<pre><code><span style="color:#ff00ff;">class</span> CreateTeletubbies <span style="color:#008000;">&lt; ActiveRecord::Migration</span>
  <span style="color:#ff00ff;">def</span> <span style="color:#008000;">change</span> 
    create_table <span style="color:#0000ff;">:teletubbies</span> <span style="color:#ff00ff;">do</span> |t| 
      t.string <span style="color:#0000ff;">:name</span> 
      t.text <span style="color:#0000ff;">:bio</span> 
      t.integer <span style="color:#0000ff;">:age</span> 

      t.timestamp <span style="color:#0000ff;">null:false</span>
    <span style="color:#ff00ff;">end </span>
  <span style="color:#ff00ff;">end</span> 
<span style="color:#ff00ff;">end</span></code></pre>
For changes to take place, the user must run that migration file by typing in the terminal:
<pre><code>$ rakedb:migrate
</code></pre>
This will run the current migration, as well as any other migrations that other users have committed.

Now, I have my current Teletubby model, but to add a <strong>color</strong> column, I run a migration:
<pre><code>$ rails g migration AddColorToTeletubbies color:string
</code></pre>
There is a general formula for a migration so that Rails will write in all the data:
-- <span style="color:#ff0000;">Add&lt;<span style="color:#333399;"><em>Anything</em></span>&gt;To&lt;<span style="color:#333399;"><em>TableName</em></span>&gt; <span style="color:#333399;"><em>column_name</em></span>:<span style="color:#333399;"><em>type</em></span></span> --

This will generate a migration that looks something like this:
<pre><code><span style="color:#ff00ff;">class</span> AddColorToTeletubbies <span style="color:#008000;">&lt; ActiveRecord::Migration</span>
  <span style="color:#ff00ff;">def</span> <span style="color:#008000;">change</span>
    add_column <span style="color:#0000ff;">:teletubbies</span>, <span style="color:#0000ff;">:color</span>, <span style="color:#0000ff;">:string</span>
  <span style="color:#ff00ff;">end</span>
<span style="color:#ff00ff;">end
</span></code></pre>
Some migration options for the columns can be added as well, before running <code>rakedb:migrate</code>:
<table>
<tbody>
<tr>
<td>default: &lt;value&gt;</td>
<td>limit: 3</td>
<td>null: false</td>
</tr>
<tr>
<td>first: true</td>
<td>after: :email</td>
<td>unique: true</td>
</tr>
</tbody>
</table>
Have fun migrating!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>253</wp:post_id>
  <wp:post_date>2016-04-30 14:04:29</wp:post_date>
  <wp:post_date_gmt>2016-04-30 22:04:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>rails-database-migration</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[22343394541]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>4</wp:comment_id>
    <wp:comment_author><![CDATA[bejan.maljai]]></wp:comment_author>
    <wp:comment_author_email>bmaljai@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://bejanmaljai.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>216.174.112.50</wp:comment_author_IP>
    <wp:comment_date>2016-05-02 17:24:35</wp:comment_date>
    <wp:comment_date_gmt>2016-05-03 01:24:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[good summary of migration]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>24247144</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1468434827</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1468434827</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1468434828.0985240936279296875;s:5:"event";s:15:"status-approved";s:4:"user";s:11:"kylietramle";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1462243845.2606189250946044921875;s:5:"event";s:9:"check-ham";s:4:"user";s:11:"bejanmaljai";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1462238676.223762035369873046875;s:5:"event";s:9:"check-ham";s:4:"user";s:11:"bejanmaljai";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Scope in Javascript</title>
  <link>https://kylietramle.wordpress.com/2016/05/18/scope-in-javascript/</link>
  <pubDate>Wed, 18 May 2016 20:13:01 +0000</pubDate>
  <dc:creator>kylietramle</dc:creator>
  <guid isPermaLink="false">https://kylietramle.wordpress.com/?p=348</guid>
  <description/>
  <content:encoded><![CDATA[Understanding local and global scope in Javascript allows programmers to grasp which variables, objects, and functions they have access to. To better explain this concept, let's look at the following code:
<pre><code><span style="color:#008000;">var</span> x <span style="color:#ff6600;">=</span> <span style="color:#0000ff;">7</span>;
<span style="color:#008000;">var</span> y <span style="color:#ff6600;">=</span> <span style="color:#0000ff;">3</span>;

<span style="color:#008000;">function</span> <span style="color:#0000ff;">add</span> (<span style="color:#0000ff;">a,b</span>) {
  <span style="color:#008000;">var</span> x <span style="color:#ff6600;">=</span> a <span style="color:#ff6600;">+</span> b;
  <span style="color:#ff6600;">return</span> x;
}

<span style="color:#008000;">function</span> <span style="color:#0000ff;">subtract</span> (<span style="color:#0000ff;">a,b</span>) {
  y <span style="color:#ff6600;">=</span> a <span style="color:#ff6600;">-</span> b;
  <span style="color:#ff6600;">return</span> y;
}
</code></pre>
-- The variables <code><span style="color:#008000;">var</span> x</code> and <code><span style="color:#008000;">var</span> y</code> have a global scope, since they are declared in the main program, outside of any function. They are accessible from anywhere.
-- Inside the function, the scope is local. All the variables declared inside the functions are only contained inside those functions.

An important point to remember is that functions always create a new scope. For example,
<pre><code><span style="color:#008000;">var</span> x <span style="color:#ff6600;">=</span> <span style="color:#0000ff;">6</span>;
<span style="color:#008000;">function</span> <span style="color:#0000ff;">add</span> (<span style="color:#0000ff;">a,b</span>) {
  <span style="color:#008000;">var</span> x <span style="color:#ff6600;">=</span> a <span style="color:#ff6600;">+</span> b;
  <span style="color:#ff6600;">return</span> x;
}
</code></pre>
Outside the function, <code>x</code> is declared to have a value of 6. However, inside the function, <code>x</code> is renamed to be the sum of a + b. Note that there is a <code>var</code> keyword on that <code>x</code> inside the function. When that happens, <code>x</code> is now an entirely new variable. That particular <code>x</code> is only accessible to the <code><span style="color:#008000;">function</span> <span style="color:#0000ff;">add</span></code>.

So, if we call the add function:
<pre><code>add(5,5);
=&gt; <span style="color:#008000;">10</span> // we get 10 as a result </code></pre>
Yet, if we log x:
<pre><code>console.log(x)
=&gt; <span style="color:#008000;">6</span> // we still get 6 </code></pre>
This is because the variable <code>x</code> inside the add function did not modify the <code>x</code> outside the function, which has a global scope.

On the other hand, it is essential to know that if we don't declared the variable <code>x</code> using <code><span style="color:#008000;">var</span> x</code>, Javascript thinks that we are referring to the global variable <code>x</code>. Check this out:
<pre><code><span style="color:#008000;">var</span> x <span style="color:#ff6600;">=</span> <span style="color:#0000ff;">6</span>;
<span style="color:#008000;">function</span> <span style="color:#0000ff;">add</span> (<span style="color:#0000ff;">a,b</span>) {
  x <span style="color:#ff6600;">=</span> a <span style="color:#ff6600;">+</span> b;  // no longer declaring the variable "x"
  <span style="color:#ff6600;">return</span> x;
}</code></pre>
This time, calling the add function would yield the same result:
<pre><code>add(5,5);
=&gt; <span style="color:#008000;">10</span></code></pre>
However, the value of x itself has been changed:
<pre><code>console.log(x);
=&gt; <span style="color:#008000;">10</span></code></pre>
In conclusion, if <code>x</code> were not declared with <code>var</code>, it will modify the same-named variable from the external scope.

Going back to the original code:
<pre><code><span style="color:#008000;">var</span> x <span style="color:#ff6600;">=</span> <span style="color:#0000ff;">7</span>;
<span style="color:#008000;">var</span> y <span style="color:#ff6600;">=</span> <span style="color:#0000ff;">3</span>;

<span style="color:#008000;">function</span> <span style="color:#0000ff;">add</span> (<span style="color:#0000ff;">a,b</span>) {
  <span style="color:#008000;">var</span> x <span style="color:#ff6600;">=</span> a <span style="color:#ff6600;">+</span> b; // <strong>local x</strong>
  <span style="color:#ff6600;">return</span> x;
}

<span style="color:#008000;">function</span> <span style="color:#0000ff;">subtract</span> (<span style="color:#0000ff;">a,b</span>) {
  y <span style="color:#ff6600;">=</span> a <span style="color:#ff6600;">-</span> b; // <strong>GLOBAL y</strong>
  <span style="color:#ff6600;">return</span> y;
}
</code></pre>
If we execute the add and subtract function, the following results are expected:
<pre><code>add(2,1);
=&gt; <span style="color:#008000;">3</span>
console.log(x)
=&gt; <span style="color:#008000;">7</span>

subtract(2,1)
=&gt; <span style="color:#008000;">1</span>
console.log(y)
=&gt; <span style="color:#008000;">1</span> // y is no longer 3
</code></pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>348</wp:post_id>
  <wp:post_date>2016-05-18 12:13:01</wp:post_date>
  <wp:post_date_gmt>2016-05-18 20:13:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scope-in-javascript</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[22946402713]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Javascript:getElementById</title>
  <link>https://kylietramle.wordpress.com/2016/05/20/javascript-and-the-dom/</link>
  <pubDate>Fri, 20 May 2016 18:47:04 +0000</pubDate>
  <dc:creator>kylietramle</dc:creator>
  <guid isPermaLink="false">https://kylietramle.wordpress.com/?p=452</guid>
  <description/>
  <content:encoded><![CDATA[Javascript uses the Document Object Model (DOM) to access and update the contents of a web page. The DOM is simply a structure of objects created by the browser that represents the elements within that specific HTML page. Methods used to find elements in the DOM tree are called DOM queries. A very useful query that selects an individual element is <code>getElementById</code>, which I will talk about today.

Because there isn't any two elements that share the same id, <code>getElementById</code> is preferably used while accessing a single object. The syntax is seen below:

<pre><code><span style="color:#ff6600;">document</span>.<span style="color:#008000;">getElementById</span>('<span style="color:#ff00ff;">one</span>')
</code></pre>

<em><span style="color:#ff6600;">document</span></em>: refers to the document object
<em><span style="color:#008000;">getElementById</span></em>: indicates that you want to find an element based on its id
<span style="color:#ff00ff;"><i>one</i></span>: the value of the id that is passed in as a parameter for the <code>getElementById</code> method

For example, if I have a 3-items HTML to-do list:

<pre><code><span style="color:#0000ff;">&lt;h2&gt;</span>To-Do List<span style="color:#0000ff;">&lt;/h2&gt;</span>
&lt;<span style="color:#0000ff;">ul&gt;
  &lt;li id ="one" class="red"</span>&gt;buy milk<span style="color:#0000ff;">&lt;/li&gt;</span>
  <span style="color:#0000ff;">&lt;li id="two" class="green"&gt;</span>clean the room<span style="color:#0000ff;">&lt;/li&gt;</span>
  <span style="color:#0000ff;">&lt;li id ="three" class="green"&gt;</span>take out trash<span style="color:#0000ff;">&lt;/li&gt;
&lt;/ul&gt;</span></code></pre>

Assuming that I have a separate CSS file that turns items that have the red class (urgent), <em><span style="color:#ff0000;">red</span></em> and green class (trivial), <em><span style="color:#008000;">green</span></em>. This is how the list should look in the browser:

<h3>To-Do List</h3>

<ul>
    <li><span style="color:#ff0000;">buy milk</span></li>
    <li><span style="color:#008000;">clean the room</span></li>
    <li><span style="color:#008000;">take out trash</span></li>
</ul>

However, since I've been slacking off and now the room looks like a pigsty, I want to change the "clean the room" urgency to red, indicating that I really should get to it. This is how I would do so using Javascript's <code>getElementById</code>:

<pre><code>// Select the element and store it in a variable
<span style="color:#008000;">var clean = document.getElementById('two');</span>
// Change the value of the class attribute
<span style="color:#008000;">clean.className = 'red';
</span></code></pre>

The updated list will show that both "buy milk" and "clean the room" are <span style="color:#ff0000;"><em>red</em></span> (urgent):

<h3>To-Do List</h3>

<ul>
    <li><span style="color:#ff0000;">buy milk</span></li>
    <li><span style="color:#ff0000;">clean the room</span></li>
    <li><span style="color:#008000;">take out trash</span></li>
</ul>

Since now that <code>getElementById</code> seems like a piece of cake, I will actually go buy milk and clean my room. Until next time!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>452</wp:post_id>
  <wp:post_date>2016-05-20 10:47:04</wp:post_date>
  <wp:post_date_gmt>2016-05-20 18:47:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>javascript-and-the-dom</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[23013423960]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>NgShow and NgHide</title>
  <link>https://kylietramle.wordpress.com/2016/05/26/ngshow-and-nghide/</link>
  <pubDate>Thu, 26 May 2016 19:34:41 +0000</pubDate>
  <dc:creator>kylietramle</dc:creator>
  <guid isPermaLink="false">https://kylietramle.wordpress.com/?p=521</guid>
  <description/>
  <content:encoded><![CDATA[Angular JS has useful built-in directives, which are markers on a HTML tag that tells Angular to run Javascript codes. Two very useful ones are <code>NgShow</code> and <code>NgHide</code>, which will allow developers to show or hide certain elements if the expression is true.

To better demonstrate this concept, let's look at my cookies store controller, where a cookie is a property of the controller:

<pre><code>(<span style="color:#008000;">function</span>() {
  <span style="color:#008000;">var</span> app = angular.module(<span style="color:#008000;">'store'</span>, []);

  app.controller(<span style="color:#008000;">'StoreController'</span>, <span style="color:#008000;">function</span>() {
    <span style="color:#0000ff;">this</span>.product = cookie;
  });
  <span style="color:#008000;">var</span> cookie = {
    <span style="color:#ff6600;">name</span>: <span style="color:#008000;">'chocolate chip'</span>, 
<span style="color:#333399;">    price</span>: 3.95, 
<span style="color:#333399;">    isReady</span>: <span style="color:#0000ff;">false</span> 
  }
})();
</code></pre>

<code>isReady</code> variable is a boolean that says whether the cookie is ready for purchase. Currently it is set to false, meaning the cookie is not ready.

Let's look at our HTML, and add a "Buy It Now!" button that only shows up if the cookie is ready to be bought using <code>NgShow</code>.

<img class="alignnone  wp-image-761" src="https://kylietramle.files.wordpress.com/2016/05/screen-shot-2016-05-27-at-12-19-49-pm.png" alt="Screen Shot 2016-05-27 at 12.19.49 PM" width="614" height="193" />

As you can see, the NgShow directive is acting on the <code>store.product.isReady</code> expression. This directive is telling our button to only show if the expression is true. Let's look at both cases on the HTML page, where:

<img class="alignnone  wp-image-762" src="https://kylietramle.files.wordpress.com/2016/05/screen-shot-2016-05-27-at-12-24-54-pm.png" alt="Screen Shot 2016-05-27 at 12.24.54 PM" width="531" height="274" />

Now, let's add another property to the cookie, called <code>soldOut</code>:

<pre><code>  <span style="color:#008000;">var</span> cookie = {
    <span style="color:#ff6600;">name</span>: <span style="color:#008000;">'chocolate chip'</span>, 
<span style="color:#333399;">    price</span>: 3.95, 
<span style="color:#333399;">    isReady</span>: <span style="color:#0000ff;">false,
</span>    <strong><span style="color:#333399;">soldOut</span>: <span style="color:#0000ff;">true</span></strong> 
  }</code></pre>

I figure that if the cookie is sold out, I might as well not have its listing show up at all. To hide the whole content, I use NgHide and apply it on the <code>&lt;div&gt;</code> element.

<div>

<img class="alignnone  wp-image-763" src="https://kylietramle.files.wordpress.com/2016/05/screen-shot-2016-05-27-at-12-32-16-pm.png" alt="Screen Shot 2016-05-27 at 12.32.16 PM" width="622" height="194" />
<div style="width:100%;overflow:hidden;"><img class="alignnone  wp-image-764" src="https://kylietramle.files.wordpress.com/2016/05/screen-shot-2016-05-27-at-12-34-40-pm.png" alt="Screen Shot 2016-05-27 at 12.34.40 PM" width="534" height="285" /></div>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>521</wp:post_id>
  <wp:post_date>2016-05-26 11:34:41</wp:post_date>
  <wp:post_date_gmt>2016-05-26 19:34:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ngshow-and-nghide</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[23213625183]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Screen Shot 2016-05-27 at 12.19.49 PM</title>
  <link>https://kylietramle.wordpress.com/2016/05/26/ngshow-and-nghide/screen-shot-2016-05-27-at-12-19-49-pm/#main</link>
  <pubDate>Fri, 27 May 2016 19:22:49 +0000</pubDate>
  <dc:creator>kylietramle</dc:creator>
  <guid isPermaLink="false">http://kylietramle.files.wordpress.com/2016/05/screen-shot-2016-05-27-at-12-19-49-pm.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>761</wp:post_id>
  <wp:post_date>2016-05-27 11:22:49</wp:post_date>
  <wp:post_date_gmt>2016-05-27 19:22:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>screen-shot-2016-05-27-at-12-19-49-pm</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>521</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://kylietramle.files.wordpress.com/2016/05/screen-shot-2016-05-27-at-12-19-49-pm.png</wp:attachment_url>
</item>
<item>
  <title>Screen Shot 2016-05-27 at 12.24.54 PM</title>
  <link>https://kylietramle.wordpress.com/2016/05/26/ngshow-and-nghide/screen-shot-2016-05-27-at-12-24-54-pm/#main</link>
  <pubDate>Fri, 27 May 2016 19:25:31 +0000</pubDate>
  <dc:creator>kylietramle</dc:creator>
  <guid isPermaLink="false">http://kylietramle.files.wordpress.com/2016/05/screen-shot-2016-05-27-at-12-24-54-pm.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>762</wp:post_id>
  <wp:post_date>2016-05-27 11:25:31</wp:post_date>
  <wp:post_date_gmt>2016-05-27 19:25:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>screen-shot-2016-05-27-at-12-24-54-pm</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>521</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://kylietramle.files.wordpress.com/2016/05/screen-shot-2016-05-27-at-12-24-54-pm.png</wp:attachment_url>
</item>
<item>
  <title>Screen Shot 2016-05-27 at 12.32.16 PM</title>
  <link>https://kylietramle.wordpress.com/2016/05/26/ngshow-and-nghide/screen-shot-2016-05-27-at-12-32-16-pm/#main</link>
  <pubDate>Fri, 27 May 2016 19:32:56 +0000</pubDate>
  <dc:creator>kylietramle</dc:creator>
  <guid isPermaLink="false">http://kylietramle.files.wordpress.com/2016/05/screen-shot-2016-05-27-at-12-32-16-pm.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>763</wp:post_id>
  <wp:post_date>2016-05-27 11:32:56</wp:post_date>
  <wp:post_date_gmt>2016-05-27 19:32:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>screen-shot-2016-05-27-at-12-32-16-pm</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>521</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://kylietramle.files.wordpress.com/2016/05/screen-shot-2016-05-27-at-12-32-16-pm.png</wp:attachment_url>
</item>
<item>
  <title>Screen Shot 2016-05-27 at 12.34.40 PM</title>
  <link>https://kylietramle.wordpress.com/2016/05/26/ngshow-and-nghide/screen-shot-2016-05-27-at-12-34-40-pm/#main</link>
  <pubDate>Fri, 27 May 2016 19:35:07 +0000</pubDate>
  <dc:creator>kylietramle</dc:creator>
  <guid isPermaLink="false">http://kylietramle.files.wordpress.com/2016/05/screen-shot-2016-05-27-at-12-34-40-pm.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>764</wp:post_id>
  <wp:post_date>2016-05-27 11:35:07</wp:post_date>
  <wp:post_date_gmt>2016-05-27 19:35:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>screen-shot-2016-05-27-at-12-34-40-pm</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>521</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://kylietramle.files.wordpress.com/2016/05/screen-shot-2016-05-27-at-12-34-40-pm.png</wp:attachment_url>
</item>
<item>
  <title>Rails:Model &amp; Relational Database</title>
  <link>https://kylietramle.wordpress.com/2016/06/24/railsmodel-relational-database/</link>
  <pubDate>Sat, 25 Jun 2016 05:50:15 +0000</pubDate>
  <dc:creator>kylietramle</dc:creator>
  <guid isPermaLink="false">https://kylietramle.wordpress.com/?p=768</guid>
  <description/>
  <content:encoded><![CDATA[In Rails, the Model is used to communicate with the database. For example, if we have a recipe data table:

<h3 style="text-align:center;"><span style="text-decoration:underline;"><strong>recipes</strong></span></h3>

<table style="width:100%;">
<tbody>
<tr>
<th>id</th>
<th>recipe</th>
<th>chef</th>
</tr>
<tr>
<td>1</td>
<td>Beef Wellington</td>
<td>Gordan Ramsay</td>
</tr>
<tr>
<td>2</td>
<td>The Graham Burger</td>
<td>Graham Elliot</td>
</tr>
<tr>
<td>3</td>
<td>Greek-Style Nachos</td>
<td>Cat Cora</td>
</tr>
<tr>
<td>4</td>
<td>Teriyaki Salmon</td>
<td>Gordon Ramsay</td>
</tr>
</tbody>
</table>

When we call <code>recipe = Recipe.find(2)</code>, Rails pull out an instance of the class Recipe with an id of 2. This is only possible because there is a model called <code>Recipe</code> that inherits from the ActiveRecord::Base. It is what maps the model <strong>Recipe</strong> to the table called <strong>recipes</strong>.

However, this recipes table is not entirely useful if we don't know anything about the chef. To solve this problem, Rails uses a relational database to establish the connection between the recipe and the chef. As a result, the recipes table now will refer to the chef to their id's instead of name:

<h3 style="text-align:center;"><span style="text-decoration:underline;"><strong>recipes</strong></span></h3>

<table style="width:100%;">
<tbody>
<tr>
<th>id</th>
<th>recipe</th>
<th><span style="color:#008000;">chef_id</span></th>
</tr>
<tr>
<td>1</td>
<td>Beef Wellington</td>
<td><span style="color:#008000;">1</span></td>
</tr>
<tr>
<td>2</td>
<td>The Graham Burger</td>
<td><span style="color:#008000;">2</span></td>
</tr>
<tr>
<td>3</td>
<td>Greek-Style Nachos</td>
<td><span style="color:#008000;">3</span></td>
</tr>
<tr>
<td>4</td>
<td>Teriyaki Salmon</td>
<td><span style="color:#008000;">1</span></td>
</tr>
</tbody>
</table>

Chefs now have their own table that contains their name and specialty. Notice how the <em>chef_id's</em> on the <strong>recipes</strong> table correspond to the <em>id's</em> in the <strong>chefs</strong> table:

<h3 style="text-align:center;"><span style="text-decoration:underline;"><strong>chefs</strong></span></h3>

<table style="width:100%;">
<tbody>
<tr>
<th><span style="color:#008000;">id</span></th>
<th>name</th>
<th>specialty</th>
</tr>
<tr>
<td><span style="color:#008000;">1</span></td>
<td>Gordan Ramsay</td>
<td>French, Italian, British</td>
</tr>
<tr>
<td><span style="color:#008000;">2</span></td>
<td>Graham Elliot</td>
<td>Bistro</td>
</tr>
<tr>
<td><span style="color:#008000;">3</span></td>
<td>Cat Cora</td>
<td>Southern, Greek, Fusion</td>
</tr>
</tbody>
</table>

The last bit is for us to map out this relationship to let Rails know of its existence. In the models file, write:

<pre><span style="color:#ff6600;">class</span> <span style="text-decoration:underline;"><span style="color:#3366ff;text-decoration:underline;">Chef</span></span> &lt; <span style="color:#ff6600;">ActiveRecord::Base</span>
  <span style="color:#008000;">has_many</span> <span style="color:#3366ff;">:recipes</span>
<span style="color:#ff6600;">end
</span></pre>

<pre><span style="color:#ff6600;">class</span> <span style="text-decoration:underline;"><span style="color:#3366ff;text-decoration:underline;">Recipe</span></span> &lt; <span style="color:#ff6600;">ActiveRecord::Base</span>
  <span style="color:#008000;">belongs_to</span> <span style="color:#3366ff;">:chef</span>
<span style="color:#ff6600;">end
</span></pre>

With this relationship established, we can easily call chefs through the recipes and vice versa.

<ul>
    <li>to count the number of recipes that Ramsay has:</li>
</ul>

<pre><span style="color:#008000;">&gt; ramsay = Chef.find(1)</span>
<span style="color:#008000;">&gt; ramsay.recipes.count</span>
  =&gt; 3
</pre>

<ul>
    <li>to pull out the chef that the recipe belongs to:</li>
</ul>

<pre><span style="color:#008000;">&gt; recipe = Recipe.find(2)</span>
<span style="color:#008000;">&gt; recipe.chef</span>
  =&gt; #&lt;Chef id: 2,
            name: 'Graham Elliot',
            specialty: 'Bistro'&gt;
<span style="color:#008000;">&gt; recipe.chef.name</span>
 =&gt; 'Graham Elliot'
</pre>

This way, the data is easier to retrieve and allows better analysis due to its correlation with each other.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>768</wp:post_id>
  <wp:post_date>2016-06-24 21:50:15</wp:post_date>
  <wp:post_date_gmt>2016-06-25 05:50:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>railsmodel-relational-database</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[24170464836]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>99 Beers: Unnecessary API Calls</title>
  <link>https://kylietramle.wordpress.com/2016/06/25/99-beers-unnecessary-api-calls/</link>
  <pubDate>Sat, 25 Jun 2016 20:24:25 +0000</pubDate>
  <dc:creator>kylietramle</dc:creator>
  <guid isPermaLink="false">https://kylietramle.wordpress.com/?p=881</guid>
  <description/>
  <content:encoded><![CDATA[For my Capstone Project at ACLTC bootcamp, I decided to make an app called <em>99 Beers</em> that allows users to search for any type of beer, rate it, add it to their wall, and see other's activities through a newsfeed.

My biggest challenge was to take into consideration two situations: beer info that comes from the Untappd API and beer info that users add themselves (in case that beer does not exist in the API database). Today, I want to note down a mistake on  unnecessary API calls that I made, which in turn slows down my app's loading time to an average of <span style="text-decoration:underline;">13 seconds</span>.

At first, I have a joint table named <strong>beers</strong> that contains the following data:

<h3 style="text-align:center;"><span style="text-decoration:underline;">beers</span></h3>

<table style="width:100%;">
<tbody>
<tr>
<th>id</th>
<th>user_id</th>
<th>api_id</th>
<th>rating</th>
<th>tap</th>
<th><span style="color:#ff00ff;">custom_beer_id</span></th>
<th>image</th>
</tr>
<tr>
<td>1</td>
<td>5</td>
<td>6204</td>
<td>4</td>
<td>false</td>
<td><span style="color:#ff00ff;">null</span></td>
<td>anchor.jpg</td>
</tr>
<tr>
<td>2</td>
<td>5</td>
<td>null</td>
<td>5</td>
<td>true</td>
<td><span style="color:#ff00ff;">20</span></td>
<td>jims.jpg</td>
</tr>
</tbody>
</table>

<strong>id</strong>: primary key
<strong>user_id</strong>: user that added the beer
<strong>api_id</strong>: API id of the beer that was pulled from the database
<strong>rating</strong>: number of stars
<strong>tap</strong>: if the beer was tap(true) or bottled(false)
<strong>custom_beer_id</strong>: only exists if the beer was manually added--not from the API
<strong>image</strong>: beer image uploaded by the user

The <strong>beers</strong> table refers to the <span style="color:#ff00ff;"><em>custom_beer_id</em></span>, which comes from the <strong>custom_beers</strong> table's primary key:

<h3 style="text-align:center;"><span style="text-decoration:underline;">custom_ beers</span></h3>

<table style="width:100%;">
<tbody>
<tr>
<th><span style="color:#ff00ff;">id</span></th>
<th>name</th>
<th>style</th>
<th>abv</th>
<th>ibu</th>
<th>brewery</th>
<th>description</th>
</tr>
<tr>
<td><span style="color:#ff00ff;">20</span></td>
<td>Sunrise Set</td>
<td>Berliner-Weisse (Sour)</td>
<td>5</td>
<td>20</td>
<td>Black Hammer Brewing</td>
<td>Sweet and sour, very easy to drink.</td>
</tr>
</tbody>
</table>

These two tables are related by a <span style="color:#008000;">has_one</span> relationship, along with a <span style="color:#008000;">has_many</span> relationship with users:

<pre><span style="color:#ff6600;">class</span> <span style="text-decoration:underline;"><span style="color:#3366ff;text-decoration:underline;">Beer</span></span> &lt; <span style="color:#ff6600;">ActiveRecord::Base</span>
  <span style="color:#008000;">belongs_to</span> <span style="color:#3366ff;">:custom_beer
</span>  <span style="color:#008000;">belongs_to</span> <span style="color:#3366ff;">:user</span>
<span style="color:#ff6600;">end
</span></pre>

<pre><span style="color:#ff6600;">class</span> <span style="color:#3366ff;"><u>CustomBeer</u></span> &lt; <span style="color:#ff6600;">ActiveRecord::Base</span>
  <span style="color:#008000;">has_one</span> <span style="color:#3366ff;">:beer</span>
<span style="color:#ff6600;">end
</span></pre>

<pre><span style="color:#ff6600;">class</span> <span style="color:#3366ff;"><u>User</u></span> &lt; <span style="color:#ff6600;">ActiveRecord::Base</span>
  <span style="color:#008000;">has_many</span> <span style="color:#3366ff;">:beers</span>
<span style="color:#ff6600;">end
</span></pre>

To display the beers' name, I wrote the following model method in <em>app/models/beer.rb</em>:

<pre><span style="color:#ff6600;">class</span> <span style="text-decoration:underline;"><span style="color:#3366ff;text-decoration:underline;">Beer</span></span> &lt; <span style="color:#ff6600;">ActiveRecord::Base</span>
  <span style="color:#008000;"><span style="color:#ff00ff;">def</span> name
</span>    <span style="color:#ff00ff;">if</span> custom_beer_id
      custom_beer.name
    <span style="color:#ff00ff;">else</span>
      api_beer = <span style="color:#3366ff;">Untappd</span>::<span style="color:#3366ff;">Beer</span>.info(<span style="color:#3366ff;">api_id</span>)
      api_beer.beer.beer_name
    <span style="color:#ff00ff;">end</span>
<span style="color:#ff6600;">end</span></pre>

As you can see, my mistake was to rely 100% on the API calls to display the API beer's info instead of saving it to my database. The custom beer doesn't cause any trouble, because retrieving it from my own database is a breeze.

Note how I am making a call <span style="text-decoration:underline;">everytime</span> to the Untappd API just to retrieve the name. This is fine when the call is meant for one beer. The biggest problem was on my user's view page:

<em>views/users/show.html.erb</em>

<pre>&lt;% @user.beers.each <span style="color:#ff00ff;">do</span> |beer| %&gt;   <span style="color:#ff0000;">&lt;-- calling all user's beers</span>
  &lt;%= beer.name %&gt;
&lt;% <span style="color:#ff00ff;">end</span> %&gt;
</pre>

As users add more beers to the database, my page slows down more and more because it is making an API call for as many beers as the user added.

When I realized my mistake, I decided to save the API beer's name to my <strong>beers</strong> table so when I need to display it on my user's view page, it is calling my database instead of the API. These are the steps I took:

1.Perform a migration on the <strong>beers</strong> table, adding a "beer_name" column.

<table style="width:100%;">
<tbody>
<tr>
<th>id</th>
<th><span style="color:#ff0000;">beer_name</span></th>
<th>user_id</th>
<th>api_id</th>
<th>rating</th>
<th>tap</th>
<th>custom_beer_id</th>
<th>image</th>
</tr>
<tr>
<td>1</td>
<td><span style="color:#ff0000;">Anchor Steam Beer</span></td>
<td>5</td>
<td>6204</td>
<td>4</td>
<td>false</td>
<td>null</td>
<td>anchor.jpg</td>
</tr>
</tbody>
</table>

2.Add a hidden field to the form_tag to save the API beer's name to my own database:

<pre>&lt;%= form_tag "<span style="color:#ff6600;">/beers</span>", <span style="color:#3366ff;">multipart: true</span>, <span style="color:#3366ff;">method: :post</span> <span style="color:#ff00ff;">do</span> %&gt;
. . . 
  &lt;%= hidden_field_tag(<span style="color:#3366ff;">:beer_name</span>, @api_beer.beer.beer_name) %&gt;
&lt;% <span style="color:#ff00ff;">end</span> %&gt;</pre>

3.Save the :beer_name params into the beer_name column as I create the beer in the beers_controller:

<pre>@beer = Beer.new(<span style="color:#ff0000;">beer_name: params[<span style="color:#3366ff;">:beer_name</span>]</span>, api_id: params[:api_id], ...)
@beer.save
</pre>

4.Rewrite my model method to display the beer's name:

<pre><span style="color:#ff6600;">class</span> <span style="text-decoration:underline;"><span style="color:#3366ff;text-decoration:underline;">Beer</span></span> &lt; <span style="color:#ff6600;">ActiveRecord::Base</span>
  <span style="color:#008000;"><span style="color:#ff00ff;">def</span> name
</span>    <span style="color:#ff00ff;">if</span> custom_beer_id
      custom_beer.name
    <span style="color:#ff00ff;">else</span>
      beer_name
    <span style="color:#ff00ff;">end</span>
<span style="color:#ff6600;">end</span></pre>

Now, everytime I call the beer's name, in both cases, Rails would pull it from my database instead of the Untappd API. This solves the slow-loading time problem, as well as making each API call more efficient, lessening my chance of exceeding the rate limit.

I hope that this post will help new developers out there who are not aware of how much API calls can slow down your app!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>881</wp:post_id>
  <wp:post_date>2016-06-25 12:24:25</wp:post_date>
  <wp:post_date_gmt>2016-06-25 20:24:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>99-beers-unnecessary-api-calls</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[24188118677]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>RSpec Intro</title>
  <link>https://kylietramle.wordpress.com/2016/07/07/rspec-intro/</link>
  <pubDate>Thu, 07 Jul 2016 22:34:17 +0000</pubDate>
  <dc:creator>kylietramle</dc:creator>
  <guid isPermaLink="false">https://kylietramle.wordpress.com/?p=1054</guid>
  <description/>
  <content:encoded><![CDATA[RSpec is a popular Ruby testing framework that evolved out of the idea called Behavior Driven Development (BDD). It focuses on the behavior of the application, rather than verification testing, or test-driven development.

Say we want to build a Pig model that has certain characteristics. Let's use RSpec to describe the model's requirements:

<span style="color:#000080;"><em>spec/models/pig_spec.rb</em></span>

<pre><span style="color:#ff00ff;">require</span> <span style="color:#008080;">'spec_helper'</span>

describe <span style="color:#0000ff;">Pig</span> <span style="color:#ff00ff;">do</span>
 it <span style="color:#008000;">"is named Willy"</span> <span style="color:#ff00ff;">do</span>
   pig = <em><span style="color:#0000ff;">Pig</span></em>.<span style="color:#ff00ff;">new</span>
   expect(pig.name).to eq <span style="color:#008000;">'Willy'</span>
 <span style="color:#ff00ff;">end</span>
<span style="color:#ff00ff;">end
</span></pre>

This test verifies that the pig's name is Willy; to further break it down:

<ul>
    <li><code>describe <span style="color:#0000ff;">Pig</span> <span style="color:#ff00ff;">do</span></code>: the example group and its description</li>
    <li><code>it <span style="color:#008000;">"is named Willy"</span> <span style="color:#ff00ff;">do</span></code>: the first example and that specific example's description; every example start with <span style="color:#ff0000;"><em>it</em></span></li>
    <li><code>pig = <em><span style="color:#0000ff;">Pig</span></em>.<span style="color:#ff00ff;">new </span>
expect(pig.name).to eq <span style="color:#008000;">'Willy'</span></code>: the scenario to test</li>
    <li><code>expect(pig.name)</code>: expectation target; compared to matcher for a true/false result</li>
    <li><code>to eq <span style="color:#008000;">'Willy'</span></code>: matcher; used to compare with expectation target</li>
</ul>

If I run that test right now, it fails because we haven't created any model with the specified attribute. Let's now build that model:

<span style="color:#000080;"><em>spec/models/pig.rb</em></span>

<pre><span style="color:#ff00ff;">class</span> <span style="color:#0000ff;">Pig</span>
 <span style="color:#ff00ff;">attr_accessor</span> <span style="color:#3366ff;">:name</span>

 <span style="color:#ff00ff;">def</span> <span style="color:#3366ff;">initialize</span>
   <span style="color:#0000ff;">@name</span> = '<span style="color:#008000;">Willy</span>'
<span style="color:#ff00ff;"> end
end
</span></pre>

Now I run the test:

<pre>$ rspec spec/models/pig_spec.rb

Finished in 0.00156 seconds
<span style="color:#008000;">1 example, 0 failures</span></pre>

The test now passes <span style="color:#008000;"><strong>✔</strong></span>.

Similarly, we can create new expectations and test for other feature that we want, for example:

<pre>describe <span style="color:#0000ff;">Pig</span> <span style="color:#ff00ff;">do
</span>...
 it <span style="color:#008000;">"weighs more than 200 lbs"</span> <span style="color:#ff00ff;">do
</span>   pig = <span style="color:#0000ff;"><em>Pig</em></span>.<span style="color:#ff00ff;">new</span>
   expect(pig.weight).to be <span style="color:#339966;">&gt;</span> <span style="color:#800080;">200</span>
 <span style="color:#ff00ff;">end</span>
...
<span style="color:#ff00ff;">end</span></pre>

For more information on matchers, see these <a href="https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers">built-in matchers.</a>

Happy testing!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1054</wp:post_id>
  <wp:post_date>2016-07-07 14:34:17</wp:post_date>
  <wp:post_date_gmt>2016-07-07 22:34:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>rspec-intro</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[24571777598]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Fibonacci Sequence</title>
  <link>https://kylietramle.wordpress.com/2016/07/18/fibonacci-sequence/</link>
  <pubDate>Mon, 18 Jul 2016 21:04:57 +0000</pubDate>
  <dc:creator>kylietramle</dc:creator>
  <guid isPermaLink="false">https://kylietramle.wordpress.com/?p=1162</guid>
  <description/>
  <content:encoded><![CDATA[The Fibonacci Sequence is a series of numbers at which the next number is found by adding the previous two. One of its most important uses is to predict stock prices (Elliot Wave Theory). Using Ruby, I will explain how to print out the Fibonacci sequence, while not exceeding given integer <em>n</em>. Let's say n = 50.

For comparison purposes, the first 10 numbers in the Fibonacci Sequence are (where n &lt;= 50):

<p style="text-align:center;"><code>0,1,1,2,3,5,8,13,21,34</code></p>

First, I assign the first number to variable <em>a</em> and the second number to variable <em>b:</em>

<pre>a <span style="color:#008000;">=</span> <span style="color:#ff6600;">0</span>
b <span style="color:#008000;">=</span> <span style="color:#ff6600;">1
</span></pre>

Using a while loop condition, I make sure that <em>a</em> does not exceed <em>n</em>:

<pre><span style="color:#ff00ff;">while</span> a <span style="color:#008000;">&lt;=</span> n     
</pre>

Here is the core part of the program, which I will explain soon:

<pre><span style="color:#ff00ff;">while</span> a <span style="color:#008000;">&lt;=</span> 50           # given n = 50
<strong>1.</strong>  <span style="color:#3366ff;">print</span> a.to_s <span style="color:#008000;">+</span> <span style="color:#ff6600;">" "</span>
<strong>2.</strong>  c <span style="color:#008000;">=</span> a <span style="color:#008000;">+</span> b
<strong>3.</strong>  a <span style="color:#008000;">=</span> b
<strong>4.</strong>  b <span style="color:#008000;">=</span> c
<span style="color:#ff00ff;">end</span></pre>

Line 1 is self-explanatory, combined with the while loop condition, it tells the program to keep printing the variable <em>a</em> as long as it doesn't exceed <em>n</em>. <em>to_s</em> and the <em>" "</em> after just adds spaces in between so the output becomes easier to read.

Line 2 creates a new variable <em>c</em> that is the sum of <em>a</em> and<em> b</em>. It serves as the next number in the sequence. <em>c</em> is merely a placeholder so that the shifting can happen in the next line of code.

Line 3 and 4 reassigns a = b, and b = c, which shifts <em>a</em> and <em>b</em> down the sequence, so that the next time to loop runs, the program will add the 2nd and 3rd term, and so on.

Let's take a closer look at what happens to <em>a</em> and <em>b</em> down the sequence:

<pre>0,     1,     1,     2,     3,     5,     8, ...
<span style="color:#ff0000;">a</span>      <span style="color:#0000ff;">b</span>
       <span style="color:#ff0000;">a</span>      <span style="color:#0000ff;">b</span>
              <span style="color:#ff0000;">a</span>      <span style="color:#0000ff;">b</span>
                     <span style="color:#ff0000;">a</span>      <span style="color:#0000ff;">b</span>
                            <span style="color:#ff0000;">a</span>       <span style="color:#0000ff;">b</span>
                                    <span style="color:#ff0000;">a</span>      <span style="color:#0000ff;">b  </span>...</pre>

<span style="text-decoration:underline;">1st loop: </span>

<span style="color:#ff6600;">0</span>
c =a + b =0 + 1 = 1;  <strong><span style="color:#008000;">c= 1</span></strong>
a = b = 1;                    <strong><span style="color:#008000;">a = 1</span></strong>
b = c = 1;                    <strong><span style="color:#008000;">b = 1</span></strong>

<span style="text-decoration:underline;">2nd loop:</span>

<span style="color:#ff6600;">0   1</span>
c =a + b =1 + 1 = 2;  <span style="color:#008000;"><strong>c= 2</strong></span>
a = b = 1;                    <span style="color:#008000;"><strong>a= 1</strong></span>
b = c = 2;                    <span style="color:#008000;"><strong>b = 2</strong></span>

<span style="text-decoration:underline;">3rd loop:</span>

<span style="color:#ff6600;">0   1   1</span>
c =a + b =1 + 2 = 3; <span style="color:#008000;"><strong>c= 3</strong></span>
a = b = 2;                   <span style="color:#008000;"><strong>a= 2</strong></span>
b = c = 3;                   <span style="color:#008000;"><strong>b = 3</strong></span>

..etc. You get the idea! The complete program looks like this:

<pre>a <span style="color:#008000;">=</span> <span style="color:#ff6600;">0</span>
b <span style="color:#008000;">=</span> <span style="color:#ff6600;">1</span>
<span style="color:#ff00ff;">while</span> a <span style="color:#008000;">&lt;=</span> 50
  <span style="color:#3366ff;">print</span> a.to_s <span style="color:#008000;">+</span> <span style="color:#ff6600;">" "</span>
  c <span style="color:#008000;">=</span> a <span style="color:#008000;">+</span> b
  a <span style="color:#008000;">=</span> b
  b <span style="color:#008000;">=</span> c
<span style="color:#ff00ff;">end</span></pre>

Running the code gives us the following:

<pre>$ 0,1,1,2,3,5,8,13,21,34
</pre>

Now it's a matter of replacing <em>n</em> and Fibonacci away!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1162</wp:post_id>
  <wp:post_date>2016-07-18 13:04:57</wp:post_date>
  <wp:post_date_gmt>2016-07-18 21:04:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fibonacci-sequence</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[24908983132]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Angular: Forms &amp; Live Preview</title>
  <link>https://kylietramle.wordpress.com/2016/08/09/angular-forms-live-preview/</link>
  <pubDate>Tue, 09 Aug 2016 21:58:34 +0000</pubDate>
  <dc:creator>kylietramle</dc:creator>
  <guid isPermaLink="false">https://kylietramle.wordpress.com/?p=1291</guid>
  <description/>
  <content:encoded><![CDATA[Today we explore how to create an Angular review form and have it displayed on the page as users type. This the magic that Angular refers to as <strong>Two-Way Binding</strong>.

First, let's add a reviews array to the product (bears) in <em>app.js</em>, where our product controller is located:

<strong><em>app.js</em></strong>

<pre>app.<span style="color:#3366ff;">controller</span>(<span style="color:#ffcc00;"><span style="color:#cc99ff;">'StoreController</span>'</span>, <span style="color:#3366ff;">function</span>() {
 <em><span style="color:#ff6600;">this</span></em>.products <span style="color:#ff00ff;">=</span> bears; // property of the controller
});
<span style="color:#3366ff;">var</span> bears <span style="color:#ff00ff;">=</span> [
 {
  name: 'Willy',
  price: ...
  description: ...
<strong>  reviews: [</strong>
<strong>   {</strong>
<strong>     stars: <span style="color:#cc99ff;">5</span>,</strong>
<strong>     body: <span style="color:#ff9900;">'This bear is adorable!'</span>,</strong>
<strong>     author: <span style="color:#ff9900;">'kylie@williors.com'</span></strong>
<strong>   },</strong>
<strong>   {</strong>
<strong>     stars: <span style="color:#cc99ff;">2</span>,</strong>
<strong>     body: <span style="color:#ff9900;">'I do not like this bear at all.'</span>,</strong>
<strong>     author: <span style="color:#ff9900;">'what-a-hater@williors.com'</span></strong>
<strong>   }</strong>
<strong>  ]</strong>
 },
 ...
];</pre>

To display the reviews on the page, we loop through the reviews array using <strong>ng-repeat</strong>:

<strong><em>index.html</em></strong>

<pre>&lt;<span style="color:#ff00ff;">h4</span>&gt;Reviews&lt;/<span style="color:#ff00ff;">h4</span>&gt;
 &lt;<span style="color:#ff00ff;">li</span> <span style="color:#008000;">ng-repeat</span>="review in product.reviews"&gt;
  &lt;<span style="color:#ff00ff;">blockquote</span>&gt;
    &lt;<span style="color:#ff00ff;">strong</span>&gt;{{review.stars}} Stars&lt;/<span style="color:#ff00ff;">strong</span>&gt;
    {{review.body}}
    &lt;<span style="color:#ff00ff;">cite</span> <span style="color:#008000;">class</span>=<span style="color:#ff6600;">"clearfix"</span>&gt;—{{review.author}}&lt;/<span style="color:#ff00ff;">cite</span>&gt;
  &lt;<span style="color:#ff00ff;">/blockquote</span>&gt;
 &lt;/<span style="color:#ff00ff;">li</span>&gt;</pre>

Here is what the reviews will look like on the page:

<img class="  wp-image-1403 aligncenter" src="https://kylietramle.files.wordpress.com/2016/08/screen-shot-2016-08-09-at-2-41-28-pm.png" alt="Screen Shot 2016-08-09 at 2.41.28 PM" width="380" height="236" />

Next, we add a simple <span style="color:#993300;">HTML form</span> and the <span style="color:#003300;">live preview</span> code below the submitted reviews:

<strong><em>index.html</em></strong>

<pre>&lt;<span style="color:#ff00ff;">h4</span>&gt;Reviews&lt;/<span style="color:#ff00ff;">h4</span>&gt;
...
 &lt;<span style="color:#ff00ff;">blockquote</span>&gt;...&lt;<span style="color:#ff00ff;">/blockquote</span>&gt;
 
&lt;form name="reviewForm"&gt;
<span style="color:#808080;">  &lt;!-- Live Preview --&gt;</span>
<span style="color:#003300;">  &lt;blockquote&gt;
    &lt;strong&gt;{{review.stars}} Stars&lt;/strong&gt;
    {{review.body}}
    &lt;cite class="clearfix"&gt;—{{review.author}}&lt;/cite&gt;
  &lt;/blockquote&gt;</span>
  
<span style="color:#808080;">  &lt;!-- HTML Form --&gt;
</span><span style="color:#993300;">  &lt;select&gt;</span>
<span style="color:#993300;">    &lt;option value="1"&gt;1 star&lt;/option&gt;</span>
<span style="color:#993300;">    &lt;option value="2"&gt;2 stars&lt;/option&gt;</span>
<span style="color:#993300;">    ...</span>
<span style="color:#993300;">  &lt;/select&gt;</span>
<span style="color:#993300;">  &lt;textarea&gt;&lt;/textarea&gt;</span>
<span style="color:#993300;">  &lt;input type="email"&gt;</span>
<span style="color:#993300;">  &lt;input type="submit" value="Submit Review"&gt;</span>
 &lt;/form&gt;</pre>

Note how the live preview code is very much the same as displaying the submitted reviews on the page. However, for the preview to work parallel with the HTML form, now we use <strong>two-way binding</strong>, with the help of <strong>ng-model</strong> directive, to bind the stars, body, author objects to the form elements.

<pre>...
&lt;form name="reviewForm"&gt;
<span style="color:#808080;">  &lt;!-- Live Preview --&gt;</span>
<span style="color:#003300;">  &lt;blockquote&gt;
    &lt;strong&gt;<span style="color:#ff0000;">{{review.stars}}</span> Stars&lt;/strong&gt;
    <span style="color:#0000ff;">{{review.body}}</span>
    &lt;cite class="clearfix"&gt;—<span style="color:#ff00ff;">{{review.author}}</span>&lt;/cite&gt;
  &lt;/blockquote&gt;</span>
  
<span style="color:#808080;">  &lt;!-- HTML Form --&gt;
</span><span style="color:#993300;">  &lt;select <span style="color:#ff0000;">ng-model="review.stars"</span>&gt;</span>
<span style="color:#993300;">    &lt;option value="1"&gt;1 star&lt;/option&gt;</span>
<span style="color:#993300;">    &lt;option value="2"&gt;2 stars&lt;/option&gt;</span>
<span style="color:#993300;">    ...</span>
<span style="color:#993300;">  &lt;/select&gt;</span>
<span style="color:#993300;">  &lt;textarea <span style="color:#0000ff;">ng-model="review.body"</span>&gt;&lt;/textarea&gt;</span>
<span style="color:#993300;">  &lt;input <span style="color:#ff00ff;">ng-model="review.author"</span> type="email"&gt;</span>
<span style="color:#993300;">  &lt;input type="submit" value="Submit Review"&gt;</span>
 &lt;/form&gt;</pre>

If we jump back onto the page, we can see that as we update the form, the live preview is updated as well:

<img class="  wp-image-1433 aligncenter" src="https://kylietramle.files.wordpress.com/2016/08/screen-shot-2016-08-09-at-3-01-54-pm.png" alt="Screen Shot 2016-08-09 at 3.01.54 PM.png" width="432" height="559" />

Hope this helps, and until next time!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1291</wp:post_id>
  <wp:post_date>2016-08-09 13:58:34</wp:post_date>
  <wp:post_date_gmt>2016-08-09 21:58:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>angular-forms-live-preview</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[25630298308]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Screen Shot 2016-08-09 at 2.41.28 PM</title>
  <link>https://kylietramle.wordpress.com/2016/08/09/angular-forms-live-preview/screen-shot-2016-08-09-at-2-41-28-pm/#main</link>
  <pubDate>Tue, 09 Aug 2016 21:42:02 +0000</pubDate>
  <dc:creator>kylietramle</dc:creator>
  <guid isPermaLink="false">http://kylietramle.files.wordpress.com/2016/08/screen-shot-2016-08-09-at-2-41-28-pm.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1403</wp:post_id>
  <wp:post_date>2016-08-09 13:42:02</wp:post_date>
  <wp:post_date_gmt>2016-08-09 21:42:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>screen-shot-2016-08-09-at-2-41-28-pm</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1291</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://kylietramle.files.wordpress.com/2016/08/screen-shot-2016-08-09-at-2-41-28-pm.png</wp:attachment_url>
</item>
<item>
  <title>Screen Shot 2016-08-09 at 3.01.54 PM</title>
  <link>https://kylietramle.wordpress.com/2016/08/09/angular-forms-live-preview/screen-shot-2016-08-09-at-3-01-54-pm/#main</link>
  <pubDate>Tue, 09 Aug 2016 22:02:37 +0000</pubDate>
  <dc:creator>kylietramle</dc:creator>
  <guid isPermaLink="false">http://kylietramle.files.wordpress.com/2016/08/screen-shot-2016-08-09-at-3-01-54-pm.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1433</wp:post_id>
  <wp:post_date>2016-08-09 14:02:37</wp:post_date>
  <wp:post_date_gmt>2016-08-09 22:02:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>screen-shot-2016-08-09-at-3-01-54-pm</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1291</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://kylietramle.files.wordpress.com/2016/08/screen-shot-2016-08-09-at-3-01-54-pm.png</wp:attachment_url>
</item>
<item>
  <title>React: The Basics</title>
  <link>https://kylietramle.wordpress.com/2016/08/15/react-the-basics/</link>
  <pubDate>Mon, 15 Aug 2016 22:48:01 +0000</pubDate>
  <dc:creator>kylietramle</dc:creator>
  <guid isPermaLink="false">https://kylietramle.wordpress.com/?p=1436</guid>
  <description/>
  <content:encoded><![CDATA[React is another Javascript framework, used for building user interfaces (UIs). It is useful when the application has data that changes over time.

In React, an app is broken down into smaller <strong>components</strong>, and is built one by one. Similarly to Javascript functions, the component yields an output every time it is invoked. The concept that is truly useful in React, however, is called <strong>Virtual DOM diffing</strong>.

When a component is rendered, React creates a virtual memory of the DOM elements before any changes are made. Diffing comes in when the same component is rendered again, the Virtual DOM steps in and only updates to the browser what is necessary; the rest of the DOM elements stay the same and thus increase browser performance.

<table border="0">
<tbody>
<tr>
<th style="text-align:center;">Component A render
(1st time)</th>
<th style="text-align:center;">-&gt;  Virtual DOM</th>
<th style="text-align:center;">-&gt;  Output</th>
</tr>
<tr>
<td style="text-align:center;"></td>
<td style="text-align:center;">div 1</td>
<td style="text-align:center;">div 1</td>
</tr>
<tr>
<td style="text-align:center;"></td>
<td style="text-align:center;">div 2</td>
<td style="text-align:center;">div 2</td>
</tr>
</tbody>
</table>

If only div 2 is changed, the only part that is updated the div 2 due to the diffing mechanism.

<table border="0">
<tbody>
<tr>
<th style="text-align:center;">Component A render
(2nd time)</th>
<th style="text-align:center;">-&gt;  Virtual DOM</th>
<th style="text-align:center;">-&gt;  Output</th>
</tr>
<tr>
<td style="text-align:center;"></td>
<td style="text-align:center;"><span style="color:#999999;">div 1</span></td>
<td style="text-align:center;"><span style="color:#999999;">div 1</span></td>
</tr>
<tr>
<td style="text-align:center;"></td>
<td style="text-align:center;"><span style="color:#ff0000;">div 2: changed</span></td>
<td style="text-align:center;"><span style="color:#ff0000;">div 2: changed</span></td>
</tr>
</tbody>
</table>

In writing, a component is simply a Javascript class that inherits from the <code>React.Component</code> base class. Say if you want to build a comment box component; it will look something like this:

<strong><em>component.js</em></strong>

<pre>class <span style="color:#008000;"><em>CommentBox</em></span> <span style="color:#0000ff;">extends</span> <span style="color:#008000;">React</span><span style="color:#ff00ff;">.</span>Component {
  <span style="color:#008000;">render</span>() {
    <span style="color:#ff00ff;">return</span> ( &lt;<span style="color:#ff00ff;">div</span>&gt;Hello I am a comment&lt;/<span style="color:#ff00ff;">div</span>&gt; );
  }
}</pre>

<ul>
    <li><strong><em><span style="color:#008000;">CommentBox</span></em></strong>: the component name; written in camel-case</li>
    <li><strong><span style="color:#008000;">React</span>.Component</strong>: base class that the component inherits from</li>
    <li><strong><span style="color:#008000;">render</span>()</strong>: render function; a must-have for every component in React</li>
    <li><strong>&lt;<span style="color:#ff00ff;">div</span>&gt;...&lt;/<span style="color:#ff00ff;">div</span>&gt;</strong>: markup that is displayed on the browser</li>
</ul>

Now, to actually display the comment box, we must use ReactDOM to render components to the HTML page:

<strong><em>component.js</em></strong>

<pre>class <span style="color:#008000;"><em>CommentBox</em></span> <span style="color:#0000ff;">extends</span> <span style="color:#008000;">React</span><span style="color:#ff00ff;">.</span>Component {
 ...
}

<span style="color:#008000;">ReactDOM</span>.render (
&lt;<span style="color:#ff00ff;">CommentBox</span> /&gt;,
<span style="color:#0000ff;">document</span><span style="color:#ff00ff;">.</span>getElementById('<span style="color:#ff6600;">comment-box</span>')
);</pre>

<ul>
    <li><strong><span style="color:#008000;"><em>CommentBox</em></span>:</strong> component being invoked</li>
    <li><strong><span style="color:#0000ff;">document</span><span style="color:#ff00ff;">.</span>getElementById('<span style="color:#ff6600;">comment-box</span>')</strong>: target where the component will be rendered to (an element with this the 'comment-box' id)</li>
</ul>

<strong><em>index.html</em></strong>

<pre>&lt;!<span style="color:#ff00ff;">DOCTYPE</span> html&gt;
&lt;<span style="color:#ff00ff;">html</span>&gt;
  &lt;<span style="color:#ff00ff;">body</span>&gt;
     &lt;<span style="color:#ff00ff;">div</span> <span style="color:#008000;">id</span>=<span style="color:#ff6600;">"comment-box"</span>&gt;&lt;/<span style="color:#ff00ff;">div</span>&gt;
  &lt;/<span style="color:#ff00ff;">bod</span>y&gt;
&lt;/<span style="color:#ff00ff;">html</span>&gt;
</pre>

<span style="text-decoration:underline;">Notice</span> how we are making sure that our page contains the div id (<span style="color:#ff6600;">comment-box</span>) that matches the target id inside the renderer.

Lastly, is to include the libraries necessary for React to work. It's just a matter of referencing a few files that comes with React.

Check out the starter package here: <a href="https://facebook.github.io/react/docs/getting-started.html">React Getting Started</a>.

-- Now that I guided you on getting started, let's start building! --]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1436</wp:post_id>
  <wp:post_date>2016-08-15 14:48:01</wp:post_date>
  <wp:post_date_gmt>2016-08-15 22:48:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>react-the-basics</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[25821957565]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>React: Component State</title>
  <link>https://kylietramle.wordpress.com/2016/08/19/react-component-state/</link>
  <pubDate>Fri, 19 Aug 2016 20:02:25 +0000</pubDate>
  <dc:creator>kylietramle</dc:creator>
  <guid isPermaLink="false">https://kylietramle.wordpress.com/?p=1536</guid>
  <description/>
  <content:encoded><![CDATA[Unlike Backbone or jQuery that uses Direct DOM Manipulation, React uses <strong>Indirect DOM Manipulation</strong>. With Indirect DOM Manipulation, developers don't modify the DOM directly, but rather changes the component's <span style="text-decoration:underline;">state</span> and let React do the DOM updating.

The definition of a component state is:

<strong>state:</strong> a Javascript object that lives inside each component; can be access using <code><em><span style="color:#0000ff;">this</span></em><span style="color:#ff00ff;">.</span>state</code>.

To better demonstrate this concept, let's build one of YouTube's feature using React. Since users can report inappropriate videos--wouldn't it be great if there's a button that can do just that? I will cover building a button that toggles the video's state of being "abusive" as <span style="color:#ff0000;"><em>falsy</em></span> or <em><span style="color:#008000;">truthy</span></em>.

First of, in the <code>Video</code> class, we have to set the video's initial <code>isAbusive</code> state to false--(it is not abusive, until someone reports it).

<pre><span style="color:#0000ff;">class</span> <span style="color:#008000;"><em>Video</em></span> <span style="color:#0000ff;">extends</span> <span style="color:#008000;">React</span><span style="color:#ff00ff;">.</span>Component {
  <span style="color:#008000;">constructor</span>() {
    <span style="color:#0000ff;"><em>super</em></span>();
 
    <span style="color:#0000ff;"><em>this</em></span><span style="color:#ff00ff;">.</span>state <span style="color:#ff00ff;">=</span> {
    <span style="color:#ff6600;">isAbusive</span><span style="color:#cc99ff;">: false</span>
   };
  }
}</pre>

<code><span style="color:#008000;">constructor</span>()</code>: helps set the component's initial state
<code><em><span style="color:#0000ff;">super</span></em>()</code>: must be called along with the constructor
<code><span style="color:#0000ff;"><em>this</em></span><span style="color:#ff00ff;">.</span>state</code>:  component's state
<span style="color:#ff6600;"><code>isAbusive</code></span>: the state's property, set to <span style="color:#ff0000;">false</span> by default

To change the state of the isAbusive property in response to a user's action, we must call <code>setState</code>. Note that this will toggle the object's state; assigning the state object directly defeats the purpose of React.

<code><span style="color:#0000ff;"><em>this</em></span><span style="color:#ff00ff;">.</span>state<span style="color:#ff00ff;">.</span>isAbusive = true</code>                                                   <span style="color:#ff0000;"><strong>x</strong></span>

<code><span style="color:#0000ff;"><em>this</em></span>.<strong>setState</strong>({<span style="color:#ff6600;">isAbusive</span>: <span style="color:#ff00ff;">!</span><span style="color:#0000ff;"><em>this</em></span>.state.isAbusive})</code>        <span style="color:#008000;"><strong>✓</strong></span>

This way, <code>setState</code> will only update the properties of the argument that is passed in, instead of replacing the entire state of the object.

Now we add a button with an <code>onClick</code> handler that calls a <code>_toggleAbuse</code> method; this method handles switching the <code>isAbusive</code> state back and forth between <span style="color:#008000;">true</span> or <span style="color:#ff0000;">false</span>.

<pre><span style="color:#0000ff;">class</span> <span style="color:#008000;"><em>Video</em></span> <span style="color:#0000ff;">extends</span> <span style="color:#008000;">React</span><span style="color:#ff00ff;">.</span>Component {
 ...
  <span style="color:#ff00ff;">return</span> (
   ...
    &lt;<span style="color:#ff00ff;">button</span> <span style="color:#008000;">onClick</span><span style="color:#ff00ff;">=</span>{<span style="color:#0000ff;"><em>this</em></span><span style="color:#ff00ff;">.</span>_toggleAbuse<span style="color:#ff00ff;">.</span>bind(<span style="color:#0000ff;"><em>this</em></span>)}&gt;
      Report as Abuse
    &lt;/<span style="color:#ff00ff;">button</span>&gt;
   ...
  );
 }

<span style="color:#008000;"> _toggleAbuse</span>() {
   <em><span style="color:#0000ff;">this</span></em><span style="color:#ff00ff;">.</span>setState({
   <span style="color:#ff6600;">isAbusive</span>: <span style="color:#ff00ff;">!</span><em><span style="color:#0000ff;">this</span></em><span style="color:#ff00ff;">.</span>state<span style="color:#ff00ff;">.</span>isAbusive
   });
 }
}</pre>

<em>** Because event handlers such as <code>onClick</code> don't have access to properties, state, and component methods, we must bind the method to the current context <code>(this)</code>.</em>

As you noticed, so far I only cover how to switch the component state, but not the result of what happens when such an event happens. For example, as a result of clicking the button, the video is hidden or shows itself, etc. It can easily be done by an <strong>if-else</strong> statement:

<pre><span style="color:#ff00ff;">render</span>() {
  <span style="color:#ff00ff;">if</span> (<em><span style="color:#0000ff;">this</span></em><span style="color:#ff00ff;">.</span>state<span style="color:#ff00ff;">.</span>isAbusive) {
  <em><span style="color:#999999;">// what happens when video is not abusive</span></em>
  } <span style="color:#ff00ff;">else</span> {
  <em><span style="color:#999999;">// what happens is video is abusive</span></em>
  }
...

</pre>

Within this statement, we can write whatever we want to update as the button is clicked. If we want to change the button text from "Report as Abuse" to "Nevermind," it will look something like this:

<pre><span style="color:#ff00ff;">render</span>() {
  <strong><span style="color:#0000ff;">let</span> buttonText = <span style="color:#ff6600;">'Report as Abuse'</span></strong>;
  <span style="color:#ff00ff;">if</span> (<em><span style="color:#0000ff;">this</span></em><span style="color:#ff00ff;">.</span>state<span style="color:#ff00ff;">.</span>isAbusive) {
    <strong>buttonText = <span style="color:#ff6600;">'Nevermind'</span></strong>;
   <em><span style="color:#999999;">// what happens when video is not abusive</span></em>
  } <span style="color:#ff00ff;">else</span> {
   <em><span style="color:#999999;">// what happens is video is abusive</span></em>
  }
...
</pre>

Clicking the button back and forth, with content added, is shown here :

<h1><img class="alignnone size-full wp-image-1737" src="https://kylietramle.files.wordpress.com/2016/08/screen-shot-2016-08-19-at-12-59-26-pm.png" alt="Screen Shot 2016-08-19 at 12.59.26 PM" width="186" height="136" />   <span style="color:#0000ff;">-&gt; </span> <img class="alignnone size-full wp-image-1738" src="https://kylietramle.files.wordpress.com/2016/08/screen-shot-2016-08-19-at-12-59-47-pm.png" alt="Screen Shot 2016-08-19 at 12.59.47 PM" width="378" height="138" /></h1>

We covered quite a lot today; let me know if you have any questions!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1536</wp:post_id>
  <wp:post_date>2016-08-19 12:02:25</wp:post_date>
  <wp:post_date_gmt>2016-08-19 20:02:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>react-component-state</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[25952828385]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Screen Shot 2016-08-19 at 12.59.26 PM</title>
  <link>https://kylietramle.wordpress.com/2016/08/19/react-component-state/screen-shot-2016-08-19-at-12-59-26-pm/#main</link>
  <pubDate>Fri, 19 Aug 2016 20:00:37 +0000</pubDate>
  <dc:creator>kylietramle</dc:creator>
  <guid isPermaLink="false">http://kylietramle.files.wordpress.com/2016/08/screen-shot-2016-08-19-at-12-59-26-pm.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1737</wp:post_id>
  <wp:post_date>2016-08-19 12:00:37</wp:post_date>
  <wp:post_date_gmt>2016-08-19 20:00:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>screen-shot-2016-08-19-at-12-59-26-pm</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1536</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://kylietramle.files.wordpress.com/2016/08/screen-shot-2016-08-19-at-12-59-26-pm.png</wp:attachment_url>
</item>
<item>
  <title>Screen Shot 2016-08-19 at 12.59.47 PM</title>
  <link>https://kylietramle.wordpress.com/2016/08/19/react-component-state/screen-shot-2016-08-19-at-12-59-47-pm/#main</link>
  <pubDate>Fri, 19 Aug 2016 20:00:44 +0000</pubDate>
  <dc:creator>kylietramle</dc:creator>
  <guid isPermaLink="false">http://kylietramle.files.wordpress.com/2016/08/screen-shot-2016-08-19-at-12-59-47-pm.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1738</wp:post_id>
  <wp:post_date>2016-08-19 12:00:44</wp:post_date>
  <wp:post_date_gmt>2016-08-19 20:00:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>screen-shot-2016-08-19-at-12-59-47-pm</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1536</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://kylietramle.files.wordpress.com/2016/08/screen-shot-2016-08-19-at-12-59-47-pm.png</wp:attachment_url>
</item>
  </channel>
</rss>
